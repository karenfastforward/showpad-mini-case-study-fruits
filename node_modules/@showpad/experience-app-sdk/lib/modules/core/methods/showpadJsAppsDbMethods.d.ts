import { JsonValue } from 'type-fest';
import { AppsDbEntry, Scalar } from '@showpad/experience-app-types';
/**
 * If the generic type is passed, the result will immediately be typed correctly.
 *
 * If the value is a stringified JSON it will automatically be parsed.
 * Also booleans, strings and numbers will automatically be parsed correctly.
 *
 * @category Offline
 */
export declare const getStoreEntries: <T extends JsonValue = JsonValue>(store: string) => Promise<AppsDbEntry<T>[]>;
/**
 * Entries larger than 250,000 characters will be chunked. Be carefull when using together with the REST API.
 *
 * Objects, arrays will be automatically stringified to be stored in appsDb
 *
 * @param entryValue Limited at 10Mb (10,000,000 characters)
 *
 * @category Offline
 */
export declare const setStoreEntryValue: (store: string, entryId: string, entryValue: Scalar) => Promise<Scalar>;
/**
 * If the generic type is passed, the result will immediately be typed correctly.
 *
 * If the value is a stringified JSON it will automatically be parsed.
 * Also booleans, strings and numbers will automatically be parsed correctly.
 *
 * @category Offline
 */
export declare const getStoreEntryValue: <T extends JsonValue = JsonValue>(store: string, entryId: string) => Promise<T>;
/**
 * @category Offline
 */
export declare const deleteStoreEntry: (store: string, entryId: string) => Promise<void>;
/**
 * If the generic type is passed, the result will immediately be typed correctly.
 *
 * If the value is a stringified JSON it will automatically be parsed.
 * Also booleans, strings and numbers will automatically be parsed correctly.
 *
 * @category Offline
 */
export declare const getGlobalStoreEntries: <T extends JsonValue = JsonValue>(store: string) => Promise<AppsDbEntry<T>[]>;
/**
 * If the generic type is passed, the result will immediately be typed correctly.
 *
 * If the value is a stringified JSON it will automatically be parsed.
 * Also booleans, strings and numbers will automatically be parsed correctly.
 *
 * @category Offline
 */
export declare const getGlobalStoreEntryValue: <T extends JsonValue = JsonValue>(store: string, entryId: string) => Promise<T>;
