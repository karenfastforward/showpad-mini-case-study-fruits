declare const _default: {
    $schema: string;
    definitions: {
        Env: {
            type: string;
            properties: {
                host: {
                    type: string;
                };
                client_id: {
                    type: string;
                };
                client_secret: {
                    type: string;
                };
                username: {
                    type: string;
                };
                password: {
                    type: string;
                };
            };
            required: string[];
        };
        Author: {
            anyOf: ({
                type: string;
                properties: {
                    name: {
                        type: string;
                    };
                    email: {
                        type: string;
                    };
                    url: {
                        type: string;
                    };
                };
                required: string[];
            } | {
                type: string;
                properties?: undefined;
                required?: undefined;
            })[];
        };
        Package: {
            type: string;
            properties: {
                name: {
                    type: string;
                };
                version: {
                    type: string;
                };
                description: {
                    type: string;
                };
                author: {
                    anyOf: ({
                        type: string;
                        properties: {
                            name: {
                                type: string;
                            };
                            email: {
                                type: string;
                            };
                            url: {
                                type: string;
                            };
                        };
                        required: string[];
                    } | {
                        type: string;
                        properties?: undefined;
                        required?: undefined;
                    })[];
                };
            };
            required: string[];
        };
        Manifest: {
            type: string;
            properties: {
                identifier: {
                    type: string;
                };
                name: {
                    type: string;
                };
                version: {
                    type: string;
                };
                description: {
                    type: string;
                };
                author: {
                    anyOf: ({
                        type: string;
                        properties: {
                            name: {
                                type: string;
                            };
                            email: {
                                type: string;
                            };
                            url: {
                                type: string;
                            };
                        };
                        required: string[];
                    } | {
                        type: string;
                        properties?: undefined;
                        required?: undefined;
                    })[];
                };
            };
            required: string[];
        };
        Config: {
            type: string;
            properties: {
                version: {
                    type: string;
                };
                labels: {
                    $ref: string;
                };
                contents: {
                    $ref: string;
                };
            };
            required: string[];
        };
        OAuthGrantType: {
            enum: string[];
            type: string;
        };
        OAuthScope: {
            enum: string[];
            type: string;
        };
        ApiConfig: {
            type: string;
            properties: {
                accessToken: {
                    type: string;
                };
                url: {
                    type: string;
                };
                scope: {
                    type: string;
                    items: {
                        enum: string[];
                        type: string;
                    };
                };
            };
            required: string[];
        };
        ApiError: {
            type: string;
            properties: {
                error: {
                    type: string;
                };
            };
            required: string[];
        };
        SharedApiConfig: {
            type: string;
            properties: {
                accessToken: {
                    type: string;
                };
                accessTokenExpiresAt: {
                    type: string;
                };
            };
            required: string[];
        };
        V3Token: {
            type: string;
            properties: {
                access_token: {
                    type: string;
                };
                expires_in: {
                    type: string;
                };
                token_type: {
                    type: string;
                };
                scope: {
                    type: string;
                };
                refresh_token: {
                    type: string;
                };
                instance_url: {
                    type: string;
                };
            };
            required: string[];
        };
        V3Error: {
            type: string;
            properties: {
                error: {
                    type: string;
                };
                error_description: {
                    type: string;
                };
            };
            required: string[];
        };
        ShowpadApi: {
            enum: string[];
            type: string;
        };
        AuthCache: {
            type: string;
            properties: {
                expires_in: {
                    type: string;
                };
                request_date: {
                    type: string;
                };
            };
            required: string[];
        };
        AppsDbHttpError: {
            type: string;
            properties: {
                status: {
                    type: string;
                };
                name: {
                    type: string;
                };
                message: {
                    type: string;
                };
            };
            required: string[];
        };
        ApiItems: {
            type: string;
            properties: {
                count: {
                    type: string;
                };
                items: {
                    type: string;
                    items: {
                        $ref: string;
                    };
                };
            };
            required: string[];
        };
        V3ResponseMeta: {
            type: string;
            properties: {
                code: {
                    type: string;
                };
                message: {
                    type: string;
                };
                serverTime: {
                    type: string;
                    format: string;
                };
                userTimezone: {
                    type: string;
                    properties: {
                        name: {
                            type: string;
                        };
                        offset: {
                            type: string;
                        };
                    };
                    required: string[];
                };
            };
            required: string[];
        };
        V3ApiRef: {
            type: string;
            properties: {
                href: {
                    type: string;
                };
                id: {
                    type: string;
                };
                resourceType: {
                    type: string;
                };
            };
            required: string[];
        };
        V3ApiResponse: {
            type: string;
            properties: {
                meta: {
                    $ref: string;
                };
                response: {
                    $ref: string;
                };
            };
            required: string[];
        };
        V3List: {
            type: string;
            properties: {
                count: {
                    type: string;
                };
                items: {
                    type: string;
                    items: {
                        $ref: string;
                    };
                };
            };
            required: string[];
        };
        AppsDbScope: {
            enum: string[];
            type: string;
        };
        AppsDbChunks: {
            type: string;
            properties: {
                size: {
                    type: string;
                };
                '__@toStringTag@23': {
                    type: string;
                };
            };
            required: string[];
        };
        RawAppsDbEntry: {
            type: string;
            properties: {
                id: {
                    type: string;
                };
                storeId: {
                    type: string;
                };
                value: {
                    type: string;
                };
            };
            required: string[];
        };
        RawAppsDbValueMap: {
            type: string;
            properties: {
                size: {
                    type: string;
                };
                '__@toStringTag@23': {
                    type: string;
                };
            };
            required: string[];
        };
        RawAppsDbEntryList: {
            type: string;
            properties: {
                entries: {
                    type: string;
                    items: {
                        $ref: string;
                    };
                };
                cursor: {
                    type: string;
                };
            };
            required: string[];
        };
        AppsDbEntry: {
            type: string;
            properties: {
                value: {
                    $ref: string;
                };
                id: {
                    type: string;
                };
                storeId: {
                    type: string;
                };
            };
            required: string[];
        };
        Scalar: {
            $ref: string;
            description: string;
        };
        ToScalar: {
            description: string;
            type: string;
        };
        AppContext: {
            enum: string[];
            type: string;
        };
        CoreMethod: {
            enum: string[];
            type: string;
        };
        ShowpadMethod: {
            enum: string[];
            type: string;
        };
        LanguageCode: {
            description: string;
            enum: string[];
            type: string;
        };
        AssetType: {
            enum: string[];
            type: string;
        };
        AssetPermissions: {
            type: string;
            properties: {
                annotate: {
                    type: string;
                };
                download: {
                    type: string;
                };
                share: {
                    type: string;
                };
            };
            required: string[];
        };
        OriginalAsset: {
            type: string;
            properties: {
                id: {
                    type: string;
                };
                slug: {
                    type: string;
                };
                name: {
                    type: string;
                };
                displayName: {
                    type: string;
                };
                description: {
                    type: string;
                };
                createdAt: {
                    type: string[];
                };
                updatedAt: {
                    type: string[];
                };
                expiresAt: {
                    type: string[];
                };
                type: {
                    $ref: string;
                };
                permissions: {
                    $ref: string;
                };
            };
            required: string[];
        };
        Asset: {
            type: string;
            properties: {
                id: {
                    description: string;
                    type: string;
                };
                slug: {
                    type: string;
                };
                name: {
                    type: string;
                };
                displayName: {
                    type: string;
                };
                description: {
                    type: string[];
                };
                createdAt: {
                    type: string;
                    format: string;
                };
                updatedAt: {
                    type: string;
                    format: string;
                };
                expiresAt: {
                    anyOf: ({
                        type: string;
                        format: string;
                    } | {
                        type: string;
                        format?: undefined;
                    })[];
                };
                type: {
                    $ref: string;
                };
                permissions: {
                    $ref: string;
                };
            };
            required: string[];
        };
        EnrichedAsset: {
            type: string;
            properties: {
                id: {
                    description: string;
                    type: string;
                };
                slug: {
                    type: string;
                };
                name: {
                    type: string;
                };
                displayName: {
                    type: string;
                };
                description: {
                    type: string[];
                };
                fileUrl: {
                    type: string;
                };
                previewUrl: {
                    type: string;
                };
                createdAt: {
                    type: string;
                    format: string;
                };
                updatedAt: {
                    type: string;
                    format: string;
                };
                expiresAt: {
                    anyOf: ({
                        type: string;
                        format: string;
                    } | {
                        type: string;
                        format?: undefined;
                    })[];
                };
                type: {
                    $ref: string;
                };
                permissions: {
                    $ref: string;
                };
            };
            required: string[];
        };
        Version: {
            type: string;
        };
        OriginalUserInfo: {
            type: string;
            properties: {
                id: {
                    type: string;
                };
                email: {
                    type: string;
                };
                user_name: {
                    type: string;
                };
                full_name: {
                    type: string;
                };
            };
            required: string[];
        };
        DeviceInfo: {
            type: string;
            properties: {
                locale: {
                    $ref: string;
                };
                app: {
                    enum: string[];
                    type: string;
                };
            };
            required: string[];
        };
        Feature: {
            enum: string[];
            type: string;
        };
        Collection: {
            type: string;
            properties: {
                id: {
                    description: string;
                    type: string;
                };
                name: {
                    type: string;
                };
            };
            required: string[];
        };
        SharedSpace: {
            type: string;
            properties: {
                id: {
                    type: string;
                };
            };
            required: string[];
        };
        ShareType: {
            enum: string[];
            type: string;
        };
        ShareResultType: {
            type: string;
            properties: {
                success: {
                    description: string;
                    type: string;
                };
                partial: {
                    description: string;
                    type: string;
                };
                error: {
                    description: string;
                    type: string;
                };
            };
            required: string[];
        };
        ShareResult: {
            enum: string[];
            type: string;
        };
        ToastReason: {
            enum: string[];
            type: string;
        };
        Toast: {
            type: string;
            properties: {
                type: {
                    enum: string[];
                    type: string;
                };
                text: {
                    type: string;
                };
                actionText: {
                    type: string;
                };
            };
            required: string[];
        };
        ModalReason: {
            type: string;
        };
        ModalButton: {
            type: string;
            properties: {
                reason: {
                    type: string;
                };
                text: {
                    type: string;
                };
                tinted: {
                    type: string;
                };
            };
            required: string[];
        };
        Modal: {
            type: string;
            properties: {
                title: {
                    type: string;
                };
                text: {
                    type: string;
                };
                buttons: {
                    type: string;
                    items: {
                        $ref: string;
                    };
                };
            };
            required: string[];
        };
        AnyEvent: {};
        UploadData: {
            type: string;
            properties: {
                file: {
                    anyOf: {
                        $ref: string;
                    }[];
                };
                filename: {
                    type: string;
                };
            };
            required: string[];
        };
        UploadProgress: {
            type: string;
            properties: {
                bytesTotal: {
                    type: string;
                };
                bytesSent: {
                    type: string;
                };
            };
            required: string[];
        };
        UploadError: {
            type: string;
            properties: {
                reason: {
                    type: string;
                };
            };
            required: string[];
        };
        PageViewTouchpoint: {
            type: string;
            properties: {
                id: {
                    type: string;
                };
                name: {
                    type: string;
                };
                sourceId: {
                    type: string;
                };
                sourceName: {
                    type: string;
                };
                destinationId: {
                    type: string;
                };
                destinationName: {
                    type: string;
                };
                fields: {
                    type: string;
                    properties: {
                        pageviewDepth: {
                            description: string;
                            type: string;
                        };
                        pageviewType: {
                            description: string;
                            type: string;
                        };
                    };
                    required: string[];
                };
            };
            required: string[];
        };
        EventTouchpoint: {
            type: string;
            properties: {
                id: {
                    type: string;
                };
                name: {
                    type: string;
                };
                sourceId: {
                    type: string;
                };
                sourceName: {
                    type: string;
                };
                fields: {
                    type: string;
                    properties: {
                        eventCategory: {
                            description: string;
                            type: string;
                        };
                        eventAction: {
                            description: string;
                            type: string;
                        };
                        eventLabel: {
                            description: string;
                            type: string;
                        };
                        eventValue: {
                            description: string;
                            type: string;
                        };
                    };
                    required: string[];
                };
            };
            required: string[];
        };
        TrackEventPageView: {
            type: string;
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                touchpoint: {
                    $ref: string;
                };
            };
            required: string[];
        };
        TrackEventEvent: {
            type: string;
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                touchpoint: {
                    $ref: string;
                };
            };
            required: string[];
        };
        OriginalStatusEmitter: {
            type: string;
        };
        StatusEmitter: {
            type: string;
        };
        Label: {
            type: string;
            properties: {
                value: {
                    type: string;
                };
                description: {
                    type: string;
                };
                limit: {
                    type: string;
                };
            };
            required: string[];
        };
        OriginalLabel: {
            anyOf: ({
                $ref: string;
                type?: undefined;
            } | {
                type: string;
                $ref?: undefined;
            })[];
        };
        ContentUrl: {
            type: string;
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                value: {
                    type: string;
                };
                description: {
                    type: string;
                };
            };
            required: string[];
        };
        ContentFolder: {
            type: string;
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                value: {
                    type: string;
                };
                description: {
                    type: string;
                };
            };
            required: string[];
        };
        ContentChannel: {
            type: string;
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                value: {
                    type: string;
                };
                description: {
                    type: string;
                };
            };
            required: string[];
        };
        ContentAsset: {
            type: string;
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                value: {
                    type: string;
                    items: {
                        type: string;
                    }[];
                    minItems: number;
                    maxItems: number;
                };
                result: {
                    type: string;
                    items: {
                        type: string;
                    }[];
                    minItems: number;
                    maxItems: number;
                };
                description: {
                    type: string;
                };
            };
            required: string[];
        };
        ContentAssetTags: {
            type: string;
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                value: {
                    type: string;
                    properties: {
                        or: {
                            type: string;
                            items: {
                                type: string;
                            };
                        };
                        and: {
                            type: string;
                            items: {
                                type: string;
                            };
                        };
                    };
                };
                result: {
                    type: string;
                    items: {
                        type: string;
                    }[];
                    minItems: number;
                    maxItems: number;
                };
                description: {
                    type: string;
                };
            };
            required: string[];
        };
        ContentPage: {
            type: string;
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                value: {
                    type: string;
                    items: {
                        type: string;
                    }[];
                    minItems: number;
                    maxItems: number;
                };
                result: {
                    type: string;
                    items: {
                        type: string;
                    }[];
                    minItems: number;
                    maxItems: number;
                };
                description: {
                    type: string;
                };
            };
            required: string[];
        };
        ContentPageTags: {
            type: string;
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                value: {
                    type: string;
                    properties: {
                        or: {
                            type: string;
                            items: {
                                type: string;
                            };
                        };
                        and: {
                            type: string;
                            items: {
                                type: string;
                            };
                        };
                    };
                };
                result: {
                    type: string;
                    items: {
                        type: string;
                    }[];
                    minItems: number;
                    maxItems: number;
                };
                description: {
                    type: string;
                };
            };
            required: string[];
        };
        Content: {
            anyOf: {
                $ref: string;
            }[];
        };
        Labels: {
            anyOf: {
                $ref: string;
            }[];
        };
        OriginalLabels: {
            anyOf: ({
                $ref: string;
                type?: undefined;
            } | {
                type: string;
                $ref?: undefined;
            })[];
        };
        Contents: {
            anyOf: {
                $ref: string;
            }[];
        };
        OriginalConfigJSON: {
            type: string;
            properties: {
                labels: {
                    anyOf: ({
                        type: string;
                        items: {};
                        $ref?: undefined;
                    } | {
                        $ref: string;
                        type?: undefined;
                        items?: undefined;
                    })[];
                };
                contents: {
                    anyOf: ({
                        type: string;
                        items: {};
                        $ref?: undefined;
                    } | {
                        $ref: string;
                        type?: undefined;
                        items?: undefined;
                    })[];
                };
                assets: {
                    anyOf: ({
                        type: string;
                        items: {};
                        $ref?: undefined;
                    } | {
                        $ref: string;
                        type?: undefined;
                        items?: undefined;
                    })[];
                };
            };
            required: string[];
        };
        BaseConfigJSON: {
            type: string;
            properties: {
                labels: {
                    $ref: string;
                };
                contents: {
                    $ref: string;
                };
            };
            required: string[];
        };
        ConfigJSON: {
            description: string;
            type: string;
            properties: {
                assets: {
                    $ref: string;
                    description: string;
                };
                labels: {
                    $ref: string;
                };
                contents: {
                    $ref: string;
                };
            };
            required: string[];
        };
        EnrichedConfigJSON: {
            description: string;
            type: string;
            properties: {
                assets: {
                    $ref: string;
                    description: string;
                };
                labels: {
                    $ref: string;
                };
                contents: {
                    $ref: string;
                };
            };
            required: string[];
        };
        ParseConfigOptions: {
            type: string;
            properties: {
                localLabels: {
                    description: string;
                    type: string;
                };
            };
        };
        PasswordModalConfig: {
            type: string;
            properties: {
                description: {
                    type: string;
                };
                placeholder: {
                    type: string;
                };
                buttonText: {
                    type: string;
                };
                containerStyle: {
                    type: string;
                };
                descriptionStyle: {
                    type: string;
                };
                formStyle: {
                    type: string;
                };
                inputStyle: {
                    type: string;
                };
                buttonStyle: {
                    type: string;
                };
            };
        };
        UserInfo: {
            type: string;
            properties: {
                id: {
                    description: string;
                    type: string;
                };
                email: {
                    type: string;
                };
                userName: {
                    type: string;
                };
                fullName: {
                    type: string;
                };
            };
            required: string[];
        };
        'Record<string,unknown>': {
            type: string;
        };
        T: {
            anyOf: {
                type: string[];
            }[];
        };
        T_1: {
            anyOf: {
                type: string[];
            }[];
        };
        T_2: {
            anyOf: {
                type: string[];
            }[];
        };
        T_3: {
            anyOf: {
                type: string[];
            }[];
        };
        '{[x:string]:JsonValue;}': {
            type: string;
        };
        '{[x:string]:JsonValue|undefined;}': {
            type: string;
        };
        JsonValue: {
            description: string;
            anyOf: ({
                description: string;
                allOf: {
                    $ref: string;
                }[];
                $ref?: undefined;
                type?: undefined;
            } | {
                $ref: string;
                description: string;
                allOf?: undefined;
                type?: undefined;
            } | {
                type: string[];
                description?: undefined;
                allOf?: undefined;
                $ref?: undefined;
            })[];
        };
        JsonArray: {
            description: string;
            type: string;
            items: {
                $ref: string;
            };
        };
        Blob: {
            type: string;
            properties: {
                size: {
                    type: string;
                };
                type: {
                    type: string;
                };
            };
            required: string[];
        };
        File: {
            type: string;
            properties: {
                lastModified: {
                    type: string;
                };
                name: {
                    type: string;
                };
                webkitRelativePath: {
                    type: string;
                };
                size: {
                    type: string;
                };
                type: {
                    type: string;
                };
            };
            required: string[];
        };
        '{[key:string]:Labels;}': {
            type: string;
            additionalProperties: {
                $ref: string;
            };
        };
        '{[key:string]:string|Label|any;}': {
            type: string;
            additionalProperties: {
                anyOf: ({
                    $ref: string;
                    type?: undefined;
                } | {
                    type: string;
                    $ref?: undefined;
                })[];
            };
        };
        '{[key:string]:ContentUrl|ContentFolder|ContentChannel|ContentAsset|ContentAssetTags|ContentPage|ContentPageTags|any;}': {
            type: string;
            additionalProperties: {
                anyOf: {
                    $ref: string;
                }[];
            };
        };
        'Record<string,OriginalLabels>': {
            type: string;
        };
        'Record<string,Contents>': {
            type: string;
        };
        'Record<string,OriginalAsset>': {
            type: string;
        };
        'Record<string,Labels>': {
            type: string;
        };
        'Record<string,Asset>': {
            type: string;
        };
        'Record<string,EnrichedAsset>': {
            type: string;
        };
    };
    $id: string;
};
export default _default;
